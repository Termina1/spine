// Generated by CoffeeScript 1.3.3
(function() {
  var AjaxCache, Cached,
    __slice = [].slice;

  Cached = (function() {

    function Cached(keyStr, data) {
      this.keyStr = keyStr;
      this.data = data;
    }

    Cached.prototype.getData = function() {
      return this.data;
    };

    Cached.prototype.exists = function() {
      return this.data != null;
    };

    Cached.prototype.invalidate = function() {
      return delete AjaxCache.globalCache[this.keyStr];
    };

    return Cached;

  })();

  AjaxCache = {
    globalCache: {},
    cleanCache: function() {
      return this.globalCache = {};
    },
    hashf: function(key) {
      return key;
    },
    createKeyString: function(url, params) {
      var el, name, result;
      result = url;
      for (name in params) {
        el = params[name];
        if (!(typeof el === 'function' || typeof el === 'object')) {
          result += "" + name + "=" + el;
        }
      }
      return result;
    },
    hashKey: function(url, params) {
      return this.hashf(this.createKeyString(url, params));
    },
    store: function(url, params, data) {
      var keyStr;
      keyStr = this.hashKey(url, params);
      this.globalCache[keyStr] = new Cached(keyStr, data);
      return this.globalCache[keyStr];
    },
    get: function(url, params) {
      var keyStr;
      keyStr = this.hashKey(url, params);
      return this.globalCache[keyStr] || new Cached;
    }
  };

  Spine.Model.AjaxCache = {
    extended: function() {
      return this.caches = [];
    },
    invalidate: function() {
      var cache, _i, _len, _ref, _results;
      _ref = this.caches;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cache = _ref[_i];
        _results.push(cache.invalidate());
      }
      return _results;
    },
    fetchCache: function(params) {
      var cache, url,
        _this = this;
      url = Spine.Ajax.getURL(this);
      cache = AjaxCache.get(url, params);
      if (cache.exists() && !(params != null ? params.noCache : void 0)) {
        this.trigger.apply(this, ['ajaxSuccess'].concat(__slice.call(cache.getData())));
        return true;
      } else {
        this.one('ajaxSuccess', function(data, status, xhr) {
          return _this.caches.push(AjaxCache.store(url, params, [data, status, xhr]));
        });
        return this.fetch(params);
      }
    }
  };

  Spine.AjaxCache = AjaxCache;

}).call(this);
